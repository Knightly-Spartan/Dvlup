<apex:component controller="RadiusMapController">
	<head>
		<meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
		<meta charset="utf-8" />
		<title>Radius Search Map</title>
        <style>
            /* Always set the map height explicitly to define the size of the div
            * element that contains the map. */
            #map {
            height: 100%;
            }
            /* Optional: Makes the sample page fill the window. */
            html, body {
            height: 100%;
            margin: 0;
            padding: 0;
            }
            .controls {
            margin-top: 10px;
            border: 1px solid transparent;
            border-radius: 2px 0 0 2px;
            box-sizing: border-box;
            -moz-box-sizing: border-box;
            height: 32px;
            outline: none;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
            }
            
            #pac-input {
            background-color: #fff;
            font-family: Roboto;
            font-size: 15px;
            font-weight: 300;
            margin-left: 12px;
            padding: 0 11px 0 13px;
            text-overflow: ellipsis;
            width: 300px;
            }
            
            #pac-input:focus {
            border-color: #4d90fe;
            }
            
            .pac-container {
            font-family: Roboto;
            }            
        </style>
	</head>	
	<body>
		<div class="input">
			<input id="pac-input" class="controls" type="text" placeholder="Search Places" />
            <input id="rad-input" class="controls" type="text" placeholder="Radius" onchange="codeAddress( this.value )"/>
		</div>
		<div class="mapclass" id="map"></div>
	</body>
	<script>
		var circle = null;
		var map = null;
		var markers = [];
		var markerNodes = [];
		
		//Initial Callback Method
		function initAutocomplete() {
			infoWindow = new google.maps.InfoWindow();
			
			map = new google.maps.Map( document.getElementById( 'map' ), {
				center: { lat: -33.8688, lng: 151.2195 },
				zoom: 14,
				mapTypeId: google.maps.MapTypeId.ROADMAP
			});
			
			var infowindow = new google.maps.InfoWindow(
			{ 
				size: new google.maps.Size( 150, 50 )
			});
			
			var image = "{!URLFOR($Resource.mapassets, 'marker.png')}";
			 
			function addMarker( latitude, longitude, label, image ){
				// Create the marker - this will automatically place it
				// on the existing Google map (that we pass-in).
				var marker = new google.maps.Marker({
					map: map,
					position: new google.maps.LatLng(
						latitude,
						longitude
					),
					icon: image,
					title: ( label || "" )
				});
				map.setCenter( new google.maps.LatLng( latitude,longitude ));
				
				// Return the new marker reference.
				return( marker );
			}
				    
			if ( navigator.geolocation ) {           
				var locationMarker = null;
				 
				navigator.geolocation.getCurrentPosition(
					function( position ){
						if ( locationMarker ){
							return;
						}
						 
						console.log( "Initial Position Found" );
						 
						locationMarker = addMarker(
							position.coords.latitude,
							position.coords.longitude,
							"Your Position",
							image
						);
					},
					
					function( error ) {
						console.log( "Something went wrong: ", error );
					},
					{
						timeout: (5 * 1000),
						maximumAge: (1000 * 60 * 15),
						enableHighAccuracy: true
					}
				);           
			}
			
			// Create the search box and link it to the UI element.
			var input = document.getElementById('pac-input');
            var radInput = document.getElementById('rad-input');
			var searchBox = new google.maps.places.SearchBox( input );
			map.controls[google.maps.ControlPosition.TOP_RIGHT].push(input);
            map.controls[google.maps.ControlPosition.RIGHT_TOP].push(radInput);
			
			// Bias the SearchBox results towards current map's viewport.
			map.addListener( 'bounds_changed', function() {
				searchBox.setBounds(map.getBounds());
			});
			
			// [START region_getplaces]
			// Listen for the event fired when the user selects a prediction and retrieve
			// more details for that place.
			searchBox.addListener( 'places_changed', function() {
				var places = searchBox.getPlaces();
				
				if  ( places.length == 0 ) {
					return;
				}
				
				// Clear out the old markers.
				markers.forEach( function( marker ) {
					marker.setMap( null );
				});
				markers = [];
				
				// For each place, get the icon, name and location.
				var bounds = new google.maps.LatLngBounds();
				
				places.forEach( function( place ) {
					var icon = {
					url: place.icon,
					size: new google.maps.Size( 71, 71 ),
					origin: new google.maps.Point( 0, 0 ),
					anchor: new google.maps.Point( 17, 34 ),
					scaledSize: new google.maps.Size( 25, 25 )
					};
					
					// Create a marker for each place.		      
					markers.push( new google.maps.Marker( {
						map: map,
						icon: icon,
						title: place.name,
						position: place.geometry.location
					}));  
					
					if ( place.geometry.viewport ) {
					
					// Only geocodes have viewport.
						bounds.union( place.geometry.viewport );
					} else {
						bounds.extend( place.geometry.location );
					}
				});
				map.fitBounds( bounds );
			});
			 
			// [END region_getplaces]  
		}
		
		//Method to the get the Influencer's Locations
		function buildLocations( radius, latitude, longitude ){
			var searchUrl = "{!$Page.RadiusMapXMLFilter}?rad=" + radius + "&lat=" + latitude + "&lon=" + longitude;
			downloadUrl(searchUrl, function(data) {
				var xml = parseXml(data);
				markerNodes = xml.documentElement.getElementsByTagName( "marker" );
				var bounds = new google.maps.LatLngBounds();
				
				for (var i = 0; i < markerNodes.length; i++) {
					var name = markerNodes[i].getAttribute( "resource_name" );
					var latlng = new google.maps.LatLng(
						parseFloat( markerNodes[i].getAttribute( "lat" ) ),
						parseFloat( markerNodes[i].getAttribute( "lon" ) )
					);
					createMarker( latlng, name );
					bounds.extend( latlng );
				}
			});
		}
		
		//Method to parse the XML Filter page
		function parseXml( str ) {
			if ( window.ActiveXObject ) {
				var doc = new ActiveXObject( 'Microsoft.XMLDOM' );
				doc.loadXML( str );
				return doc;
			} else if ( window.DOMParser ) {
				return ( new DOMParser ).parseFromString( str, 'text/xml' );
			}
		}
		         
		function doNothing() {}        
		
		//Method to get XML Filter page	
		function downloadUrl( url, callback ) {
			var request = window.ActiveXObject ?
			new ActiveXObject( 'Microsoft.XMLHTTP' ) :
			new XMLHttpRequest;
			
			request.onreadystatechange = function() {
				if ( request.readyState == 4 ) {
					request.onreadystatechange = doNothing;
					callback( request.responseText, request.status );
				}
			};
			
			request.open( 'GET', url, true );
			request.send( null );
		}
		
		//Method to create markers        
		function createMarker( latlng, name ) {
			var html = "<b>" + name + "</b>";
			var marker = new google.maps.Marker({
				map: map,
				position: latlng
			});
			google.maps.event.addListener( marker, 'click', function() {
				infoWindow.setContent( html );
				infoWindow.open( map, marker );
			});
			markers.push( marker );
		}
		
		//Method to get radius and show Influencers around the searched location falling under that circle
		function codeAddress( varRadius ) {
			var radius = 0; 
			if (!isNaN(parseInt( varRadius ))) {
				radius = parseFloat( varRadius, 10 );
			}
			var address = document.getElementById('pac-input').value;
			var geocoder = new google.maps.Geocoder();
			
			geocoder.geocode( { 'address': address }, function( results, status ) {
				if ( status == google.maps.GeocoderStatus.OK ) {
					var circleCenter = results[0].geometry.location;
					var latitude = results[0].geometry.location.lat();
					var longitude = results[0].geometry.location.lng();
					var radiusMiles = radius*1609.344000614692;  
					
					if (circle) circle.setMap(null);
						
					circle = new google.maps.Circle( { center:circleCenter,
														radius: radiusMiles,
														strokeColor: '#FF0000',
														strokeOpacity: 0.7,
														strokeWeight: 1,
														fillOpacity: 0.1,
														fillColor: "#FF0000",
														map: map });
					var bounds = new google.maps.LatLngBounds();
					
					buildLocations(radius, latitude, longitude);
					
					for (var i=0; i<markers.length;i++) {
						if (google.maps.geometry.spherical.computeDistanceBetween(markers[i].getPosition(), circleCenter) <= radiusMiles) {
							bounds.extend(markers[i].getPosition())
							markers[i].setMap(map);
						} else {
							markers[i].setMap(null);
						}
					}
				} else {
					alert('Geocode was not successful for the following reason: ' + status);
				}
			});
		}
	</script>
	<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDnQxjybtT6zAf1rEoJrxXRuLw8Yas0JzQ&libraries=places,geometry&callback=initAutocomplete"></script>
	<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
</apex:component>